# -*- coding: utf-8 -*-
"""House Price Prediction System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-jtdT98S2B6ObU4rs35XBtDUnvKu-Pxy

[link text](https://)

Importing dependencies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing Boston Dataset"""

#loading boston dataset to pandas
house_price_dataset = pd.read_csv('/content/boston.csv')

print(house_price_dataset)

#Checking shape of dataset
house_price_dataset.shape

#check for missing values
house_price_dataset.isnull().sum()

#statistical measures
house_price_dataset.describe()

"""Understanding correlation between features in dataset.

1. Positive Correlation

2. Negative Correlation


"""

correlation = house_price_dataset.corr()

#constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""Splitting the data and Target"""

X = house_price_dataset.drop(['MEDV'], axis=1)
Y = house_price_dataset['MEDV']

print(X)
print(Y)

"""Slitting into Trainign and Testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2 )

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

XGBoost Regressor
"""

#loading the model
model = XGBRegressor()

#training the model with X_train
model.fit(X_train, Y_train)

"""Evaluation bold text

Prediction on traing data
"""

#accuracy for prediction on training data

training_data_prediction = model.predict(X_train)

print(training_data_prediction)

#R squared error

score_1 = metrics.r2_score(Y_train, training_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

print("R squared error : ", score_1)
print("Mean Absolure Error : ", score_2)

"""Visualizing the actual Prices and Predicted prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predictred Prices")
plt.show()

"""Prediction on Test Data"""

#accuracy for prediction on testing data

test_data_prediction = model.predict(X_test)

#R squared error

score_3 = metrics.r2_score(Y_test, test_data_prediction)

# Mean Absolute Error
score_4 = metrics.mean_absolute_error(Y_test, test_data_prediction)

#Test data

print("R squared error : ", score_3)
print("Mean Absolure Error : ", score_4)

